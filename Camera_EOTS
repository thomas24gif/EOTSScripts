//camera control

using UnityEngine;
using System.Collections;

public class NEW_CameraFollow : MonoBehaviour
{
    [Header("Configurações da Câmera")]
    public Transform target;
    public Vector3 offset = new Vector3(0, 2, -5);
    public float smoothSpeed = 0.25f;
    public float rotationSpeed = 5f;
    public float collisionOffset = 0.5f;
    public float minDistance = 1.5f;

    [Header("Limites de Rotação")]
    public float minVerticalAngle = -35f;
    public float maxVerticalAngle = 60f;

    [Header("Configurações de Colisão")]
    public LayerMask collisionMask;
    public float minHeightAboveGround = 1.5f;
    public float collisionCheckRadius = 0.3f;

    [Header("Configurações de Zoom")]
    public float zoomSpeed = 5f;
    public float minZoomDistance = 2f;
    public float maxZoomDistance = 10f;

    private float mouseX, mouseY;
    private bool isMouseLocked = true;

    private PauseMenu pauseMenu;

    IEnumerator Start()
    {
        yield return null; 

        LockMouse();

        pauseMenu = FindObjectOfType<PauseMenu>();
        if (pauseMenu == null)
        {
            Debug.LogWarning("Script de pausa não encontrado na cena.");
        }
    }

    void Update()
    {
        if (pauseMenu != null && pauseMenu.IsPaused())
        {
            return; 
        }

        if (Input.GetKey(KeyCode.LeftAlt) || Input.GetKey(KeyCode.RightAlt))
        {
            UnlockMouse();
        }
        else
        {
            LockMouse();
        }

        HandleZoom();
    }

    void LateUpdate()
    {
        if (pauseMenu != null && pauseMenu.IsPaused())
        {
            return;
        }

        if (target == null)
        {
            Debug.LogWarning("Target não definido para a câmera.");
            return;
        }

        if (isMouseLocked)
        {
            mouseX += Input.GetAxis("Mouse X") * rotationSpeed;
            mouseY -= Input.GetAxis("Mouse Y") * rotationSpeed;
            mouseY = Mathf.Clamp(mouseY, minVerticalAngle, maxVerticalAngle);

            Quaternion rotation = Quaternion.Euler(mouseY, mouseX, 0);
            Vector3 desiredPosition = target.position + rotation * offset;

            HandleCameraCollision(ref desiredPosition);

            transform.position = Vector3.Lerp(transform.position, desiredPosition, smoothSpeed);
            transform.LookAt(target);
        }
    }

    void HandleCameraCollision(ref Vector3 desiredPosition)
    {
        Vector3 direction = desiredPosition - target.position;
        float distance = direction.magnitude;

        RaycastHit hit;
        if (Physics.Raycast(target.position, direction.normalized, out hit, distance, collisionMask))
        {
            desiredPosition = hit.point + hit.normal * collisionOffset;

            if (Vector3.Distance(target.position, desiredPosition) < minDistance)
            {
                desiredPosition = target.position + direction.normalized * minDistance;
            }

            if (desiredPosition.y < hit.point.y + minHeightAboveGround)
            {
                desiredPosition.y = hit.point.y + minHeightAboveGround;
            }
        }

        CheckCameraInsideObstacle(ref desiredPosition);
    }

    void CheckCameraInsideObstacle(ref Vector3 desiredPosition)
    {
        Collider[] colliders = Physics.OverlapSphere(desiredPosition, collisionCheckRadius, collisionMask);
        if (colliders.Length > 0)
        {
            foreach (Collider collider in colliders)
            {
                Vector3 closestPoint = collider.ClosestPoint(desiredPosition);
                Vector3 direction = desiredPosition - closestPoint;
                desiredPosition = closestPoint + direction.normalized * collisionOffset;
            }
        }
    }

    void HandleZoom()
    {
        float scrollInput = Input.GetAxis("Mouse ScrollWheel");

        if (scrollInput != 0)
        {
            offset.z += scrollInput * zoomSpeed;
            offset.z = Mathf.Clamp(offset.z, -maxZoomDistance, -minZoomDistance);
        }
    }

    void LockMouse()
    {
        if (!isMouseLocked)
        {
            Cursor.lockState = CursorLockMode.Locked;
            Cursor.visible = false;
            isMouseLocked = true;
        }
    }

    void UnlockMouse()
    {
        if (isMouseLocked)
        {
            Cursor.lockState = CursorLockMode.None;
            Cursor.visible = true;
            isMouseLocked = false;
        }
    }
}
